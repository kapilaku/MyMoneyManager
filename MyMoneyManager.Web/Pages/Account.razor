@page "/account/{AccountId:int}"
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@using LiveChartsCore
@using LiveChartsCore.SkiaSharpView
@using LiveChartsCore.SkiaSharpView.Blazor
@using LiveChartsCore.SkiaSharpView.Painting
@using SkiaSharp

<PageTitle>@PageTitle</PageTitle>

<CartesianChart Series="series">
</CartesianChart>

@code {
    [Parameter]
    public int AccountId { get; set; }
    private AccountViewModel accountViewModel;
    private IEnumerable<SplitViewModel> splitViewModels;
    private string PageTitle = "账户";

    private ISeries[] series = new ISeries[]
{
    new LineSeries<int>
    {
    Values = new []{ 2, 5, 4, 2, 6 },
    Name = "Income",
    Stroke = null
    },
    new LineSeries<int>
    {
        Values = new[] { 3, 7, 2, 9, 4 },
        Name = "Outcome",
        Stroke = null
    }
};


    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("accessToken");
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);


        var response = await httpClient.GetAsync($"https://localhost:7014/api/account/{AccountId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            accountViewModel = JsonConvert.DeserializeObject<AccountViewModel>(content);
            PageTitle = accountViewModel.Name;
        }

        response = await httpClient.GetAsync($"https://localhost:7014/api/account/{AccountId}/splits");


        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            splitViewModels = JsonConvert.DeserializeObject<IEnumerable<SplitViewModel>>(content);
            
        }
    }


}

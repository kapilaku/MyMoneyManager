@page "/account/{AccountId:int}"
@inject HttpClient httpClient
@inject ILocalStorageService localStorage
@using LiveChartsCore
@using LiveChartsCore.SkiaSharpView
@using LiveChartsCore.SkiaSharpView.Blazor
@using LiveChartsCore.SkiaSharpView.Painting
@using SkiaSharp

<PageTitle>@PageTitle</PageTitle>

<CartesianChart Series="series" TooltipTextPaint="TooltipTextPaint">
</CartesianChart>

@code {
    [Parameter]
    public int AccountId { get; set; }
    private AccountViewModel accountViewModel;
    private IEnumerable<SplitViewModel> splitViewModels;
    private string PageTitle = "账户";

    private ISeries[] series = new ISeries[]{};
    // private List<Axis> xaxes = new List<Axis>();

    public SolidColorPaint TooltipTextPaint { get; set; } = new SolidColorPaint
        {
            Color = new SKColor(255, 255, 255),
            SKTypeface = SKFontManager.Default.MatchCharacter('汉'),
    };

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("accessToken");
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);


        var response = await httpClient.GetAsync($"https://localhost:7014/api/account/{AccountId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            accountViewModel = JsonConvert.DeserializeObject<AccountViewModel>(content);
            PageTitle = accountViewModel.Name;
        }



        response = await httpClient.GetAsync($"https://localhost:7014/api/account/{AccountId}/splits");


        if (response.IsSuccessStatusCode) 
        {
            var content = await response.Content.ReadAsStringAsync();
            splitViewModels = JsonConvert.DeserializeObject<IEnumerable<SplitViewModel>>(content);

            LineSeries<Decimal> lineSeries = new LineSeries<Decimal>();
            var values = new List<Decimal>();
            Axis axis = new Axis();
            Decimal balance = 0;
            values.Add(balance);
            foreach (var item in splitViewModels)
            {
                balance += item.Balance;
                values.Add(balance);
            }
            lineSeries.Values = values;
            // lineSeries.Name = accountViewModel.Name;

            series = new ISeries[]
            {
                lineSeries,
            };
        }
    }
}

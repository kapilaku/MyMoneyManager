@using MudBlazor
@inject IDialogService DialogService

<MudDialog>
    @*     <MudCardContent>
    *@        @* <EditForm>
    <MudTextField @bind-Value="@Item.Id" Label="Id" Required="true" />
    <MudTextField @bind-Value="@Item.CurrencyName" Label="货币" Required="true" />
    <MudTextField @bind-Value="@Item.CurrencyCode" Label="货币代码" Required="true" />
    </EditForm> *@

    @*  </MudCardContent>     <MudCardActions>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="ButtonType.Submit">保存</MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="Cancel">取消</MudButton>
    </MudCardActions> *@
    <DialogContent>
        <MudTextField @bind-Value="@Item.Name" Label="账户名" Required="true" />
        <MudSelect Label="货币" @bind-Value="selectedCurrency">
            @foreach (var currency in Currencies)
            {
                <MudSelectItem Value="@currency.Id">@currency.CurrencyName</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public AccountViewModel Item { get; set; }
    [Parameter] public ICollection<CurrencyViewModel> Currencies { get; set; }

    private int selectedCurrency;


    private void Submit()
    {
        // 返回当前的数据模型对象
        Item.CurrencyId = selectedCurrency;
        MudDialog.Close(DialogResult.Ok(Item));
    }

    private void Cancel()
    {
        // 关闭对话框
        MudDialog.Cancel();
    }
}